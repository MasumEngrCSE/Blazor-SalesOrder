@*<h3>SalesSateWiseMonthlyBarChart</h3>*@
@using BlazorBootstrap.Extensions
@using Color = System.Drawing.Color
@using SalesOrder.Models.Dtos
@using SalesOrder.Web.Services.Interface

<BarChart @ref="barChart" Width="700" Class="mb-4" />

<Button Type="ButtonType.Button" Color="ButtonColor.Primary" Size="Size.Small" @onclick="async () => await AddDataAsync()">Add Random Data</Button>
<Button Type="ButtonType.Button" Color="ButtonColor.Primary" Size="Size.Small" @onclick="async () => await ShowHorizontalBarChartAsync()">Horizontal Bar Chart</Button>
<Button Type="ButtonType.Button" Color="ButtonColor.Primary" Size="Size.Small" @onclick="async () => await ShowVerticalBarChartAsync()">Vertical Bar Chart</Button>


@code {

    [Inject]
    public IDashboardService dashboardService { get; set; }



    private BarChart barChart;

    private ChartData chartData;
    private BarChartOptions chartOptions;

    Random random = new Random();

    protected override async void OnInitialized()
    {
        //chartData = new ChartData
        //    {
        //        Labels = new List<string> { "January", "February", "March", "April", "May", "June" },
        //        Datasets = new List<IChartDataset>()
        //    };



    #region Service call for bar chart data
        SOBarChartDataset BarChartData = await dashboardService.GetSOMonthlyBarChart();

        chartData = new ChartData
            {
                Labels = BarChartData.Label,
                Datasets = new List<IChartDataset>()
            };

        var c = Color.FromArgb(random.Next(256), random.Next(256), random.Next(256));


        //var BarChartDataset = new BarChartDataset()
        //    {
        //        Label = $"Bar chart dataset {BarChartData.Data.Count + 1}",
        //        Data = BarChartData.Data,
        //        BackgroundColor = new List<string> { c.ToRgbString() },
        //        BorderColor = new List<string> { c.ToRgbString() },
        //        BorderWidth = new List<double> { 0 },
        //    };

        //Data = BarChartData.Data,

        chartData.Datasets.Add(GetRandomBarChartDataset2());
#endregion





        //chartData.Datasets.Add(GetRandomBarChartDataset());
        //chartData.Datasets.Add(GetRandomBarChartDataset());
        //chartData.Datasets.Add(GetRandomBarChartDataset());

        chartOptions = new BarChartOptions
            {
                Responsive = true,
                Interaction = new Interaction { Mode = InteractionMode.Index }
            };
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await barChart.InitializeAsync(chartData, chartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task AddDataAsync()
    {
        if (chartData is null || chartData.Datasets is null) return;

        chartData.Datasets.Add(GetRandomBarChartDataset2());
        await barChart.UpdateAsync(chartData, chartOptions);
    }

    private async Task ShowHorizontalBarChartAsync()
    {
        chartOptions.IndexAxis = "y";
        await barChart.UpdateAsync(chartData, chartOptions);
    }

    private async Task ShowVerticalBarChartAsync()
    {
        chartOptions.IndexAxis = "x";
        await barChart.UpdateAsync(chartData, chartOptions);
    }

    private BarChartDataset GetRandomBarChartDataset()
    {
        // random color
        var c = Color.FromArgb(random.Next(256), random.Next(256), random.Next(256));
        Console.WriteLine($"Bar Chart: Color Name: {c.Name}, HEX: {c.ToHexString()}, RGB: {c.ToRgbString()}, IsNamedColor: {c.IsNamedColor}");

        return new BarChartDataset()
            {
                Label = $"Bar chart dataset {chartData.Datasets.Count + 1}",
                Data = new List<double> {
                    random.Next(120)
                    , random.Next(120)
                    , random.Next(120)
                    , random.Next(120)
                    , random.Next(120)
                    , random.Next(120)
                    , random.Next(120) },
                BackgroundColor = new List<string> { c.ToRgbString() },
                BorderColor = new List<string> { c.ToRgbString() },
                BorderWidth = new List<double> { 0 },
            };
    }



    private BarChartDataset GetRandomBarChartDataset2()
    {
        //SOBarChartDataset BarChartData = await dashboardService.GetSOMonthlyBarChart();



        // random color
        var c = Color.FromArgb(random.Next(256), random.Next(256), random.Next(256));
        Console.WriteLine($"Bar Chart: Color Name: {c.Name}, HEX: {c.ToHexString()}, RGB: {c.ToRgbString()}, IsNamedColor: {c.IsNamedColor}");

        return new BarChartDataset()
            {
                Label = $"Bar chart dataset {chartData.Datasets.Count + 1}",
                Data = new List<double> {
                    random.Next(120)
                    , random.Next(120)
                    , random.Next(120)
                    , random.Next(120)
                    , random.Next(120)
                    , random.Next(120)
                    , random.Next(120) },
                BackgroundColor = new List<string> { c.ToRgbString() },
                BorderColor = new List<string> { c.ToRgbString() },
                BorderWidth = new List<double> { 0 },
            };
    }




}

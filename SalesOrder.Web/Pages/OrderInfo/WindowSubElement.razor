@using SalesOrder.Models.Dtos
<h3>Window Sub Element</h3>

@if (!AddEditShowed)
{
    @*State List*@
    <div>
        @*<button type="button" onclick="@showAdd" class="btn btn-primary" style="width:fit-content;text-align:right">Add Window SubElement</button>*@
        <Button Color="ButtonColor.Primary" @onclick="OnAddClick">Add Window SubElement</Button>
    </div>


    if (windowSubElements.Count() > 0)
    {
        <table class="table table-striped">
            <thead class="thead-light">
                <tr>
                    <th scope="col">Window</th>
                    <th scope="col">Element</th>
                    <th scope="col">Type</th>
                    <th scope="col">Width</th>
                    <th scope="col">Height</th>
                    <th></th>
                </tr>
            </thead>


            <tbody>
                @foreach (var itm in windowSubElements)
                {
                    <tr>
                        <td>@itm.WindowTitle</td>
                        <td>@itm.SubElement</td>
                        <td>@itm.SubElementType</td>
                        <td>
                            @itm.SubElementWidth
                        </td>
                        <td>
                            @itm.SubElementHeight
                        </td>

                        <td>
                            @*<button class="btn btn-outline-dark" @onclick="@(() => showEdit(@itm.Id??0))">Edit</button>*@
                            <button class="btn btn-outline-dark" @onclick="@(() => OnShowEdit(@itm.Id??0))">Edit</button>
                            <button class="btn btn-outline-danger" @onclick="@(() => deleteConfirm(@itm))">Delete</button>
                        </td>

                    </tr>
                }

            </tbody>
        </table>

    }


}

@*<BlazorModal ShowModal=@showModal PageTitle="@AddEditTitle" modal_minWidth="600px">
    <Body>
        <WindowSubElementAddEdit selectedId="@selectedId"
                                 WindowSubElements="@windowSubElements"
                                 OrderWindowList="@orderWindowList"
                                 FromChildCloseAction="@closeAction"></WindowSubElementAddEdit>
    </Body>
</BlazorModal>*@



<Modal @ref="modal" Size="ModalSize.Regular" />

<ConfirmDialog @ref="dialog" />
<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />

@code {

    [Parameter]
    public SalesOrderDto salesOrderModel { get; set; } = default!;

    [Parameter]
    public Action<SalesOrderDto> FromWindowAction { get; set; }


    public List<SalesOrderWindowDto> orderWindowList { get; set; }


    public List<WindowSubElementDto> windowSubElements { get; set; }
    public bool showModal = false;
    private bool IsAddEditShowed = false;
    public bool AddEditShowed { get { return IsAddEditShowed; } set { IsAddEditShowed = value; } }
    public int selectedId = 0;
    public string AddEditTitle { get; set; }


    protected override async Task OnInitializedAsync()
    {
        windowSubElements = new List<WindowSubElementDto>()
                                    { new WindowSubElementDto{IsBlank=true } };

        //orderWindowList = salesOrderModel.SalesOrderWindowList;

    }


    protected override async Task OnParametersSetAsync()
    {
        windowSubElements = salesOrderModel.WindowSubElementList;
    }

    private async void HandleValidSubmit()
    {

    }

    public void showAdd()
    {
        AddEditTitle = "Add Window Sub-Element";
        selectedId = 0;
        orderWindowList = salesOrderModel.SalesOrderWindowList;
        showModal = true;

    }

    public void showEdit(int Id)
    {
        AddEditTitle = "Edit Window Sub-Element";
        selectedId = Id;
        orderWindowList = salesOrderModel.SalesOrderWindowList;
        showModal = true;
    }


    public void delete(WindowSubElementDto row)
    {
        selectedId = row.Id ?? 0;


        if (!(row.IsNew ?? false))
        {
            if (salesOrderModel.WindowSubElementDeleteList == null)
                salesOrderModel.WindowSubElementDeleteList = new List<WindowSubElementDto>();
            salesOrderModel.WindowSubElementDeleteList.Add(row);
        }

        windowSubElements.Remove(row);

    }

    public void closeAction(List<WindowSubElementDto> windowSubElementsData)
    {
        AddEditShowed = false;
        selectedId = 0;
        windowSubElements = windowSubElementsData;
        salesOrderModel.WindowSubElementList = windowSubElementsData;
        showModal = false;

        modal.HideAsync();

        StateHasChanged();
        passToParent();
    }



    #region bb Modal

    public Modal modal = default!;


    public async Task OnAddClick()
    {
        AddEditTitle = "Add Window Sub-Element";
        selectedId = 0;
        orderWindowList = salesOrderModel.SalesOrderWindowList;
        var parameters = new Dictionary<string, object>();
        parameters.Add("selectedId", selectedId);
        parameters.Add("WindowSubElements", windowSubElements);
        parameters.Add("OrderWindowList", orderWindowList);
        parameters.Add("FromChildCloseAction", closeAction);



        await modal.ShowAsync<WindowSubElementAddEdit>(title: AddEditTitle, parameters: parameters);
    }


    public async void OnShowEdit(int Id)
    {
        AddEditTitle = "Edit Window Sub-Element";
        selectedId = Id;
        orderWindowList = salesOrderModel.SalesOrderWindowList;

        var parameters = new Dictionary<string, object>();
        parameters.Add("selectedId", selectedId);
        parameters.Add("WindowSubElements", windowSubElements);
        parameters.Add("OrderWindowList", orderWindowList);
        parameters.Add("FromChildCloseAction", closeAction);

        //OrderWindows="@orderWindows"

        await modal.ShowAsync<WindowSubElementAddEdit>(title: AddEditTitle, parameters: parameters);
    }



    public ConfirmDialog dialog;
    public async Task deleteConfirm(WindowSubElementDto row)
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "OK",
                YesButtonColor = ButtonColor.Success,
                NoButtonText = "CANCEL",
                NoButtonColor = ButtonColor.Danger
            };

        var confirmation = await dialog.ShowAsync(
            title: "Window SubElement delete",
            message1: $"Do you want delete SubElement:{row.SubElement}?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            selectedId = row.Id ?? 0;


            if (!(row.IsNew ?? false))
            {
                if (salesOrderModel.WindowSubElementDeleteList == null)
                    salesOrderModel.WindowSubElementDeleteList = new List<WindowSubElementDto>();
                salesOrderModel.WindowSubElementDeleteList.Add(row);
            }

            windowSubElements.Remove(row);

            var objwind = salesOrderModel.SalesOrderWindowList.FirstOrDefault(p => p.OrderWindowId == row.OrderWindowId);

            if (objwind != null)
                objwind.TotalSubElement = windowSubElements.Count(p => p.OrderWindowId == row.OrderWindowId);

            ShowMessage(ToastType.Danger, "Successfully Deleted.");
            passToParent();
            // do whatever
        }
        else
        {
            // do whatever
        }
    }


    public List<ToastMessage> messages = new List<ToastMessage>();
    public void ShowMessage(ToastType toastType, string message) => messages.Add(CreateToastMessage(toastType, message));
    public ToastMessage CreateToastMessage(ToastType toastType, string message)
      => new ToastMessage
          {
              Type = toastType,
              Title = "Blazor Bootstrap",
              HelpText = $"{DateTime.Now}",
              Message = message,
          };

    private void passToParent()
    {
        FromWindowAction(salesOrderModel);
    }

    #endregion


}

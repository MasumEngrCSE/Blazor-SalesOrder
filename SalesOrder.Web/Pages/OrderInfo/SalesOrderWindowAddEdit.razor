@using SalesOrder.Models.Dtos
@*<h3>SalesOrderWindowAddEdit</h3>*@


<div>

    <button type="button" onclick="@closePage" class="btn btn-primary" style="width:fit-content;text-align:right">
        Close
    </button>

    <button type="button" onclick="@WindowAddEdit" class="btn btn-primary" style="width:fit-content;text-align:right">
        @(selectedId > 0 ? "Update Window" : "Add Window")
    </button>

</div>



<div>
    <fieldset>
        @*<legend>Order Window</legend>*@
        <EditForm Model="@orderWindowModel" OnValidSubmit="@ValidSubmit">
            <DataAnnotationsValidator />
            <fieldset>

                <div class="row mb-2">
                    <label class="col-4" for="name">Window Name:</label>
                    <InputText class="form-control col-6" @bind-Value="@orderWindowModel.WindowTitle" />
                </div>

                <div class="row mb-2">
                    <label class="col-4" for="name">Window Qty:</label>
                    <InputNumber class="form-control col-6" @bind-Value="@orderWindowModel.WindowQty" />
                </div>



            </fieldset>

        </EditForm>

    </fieldset>

</div>

@code {
    [Parameter]
    public int selectedId { get; set; }


    [Parameter]
    public Action<List<SalesOrderDto>> FromChildCloseAction { get; set; } = default!;

    [Parameter]
    public List<SalesOrderDto> OrderWindows { get; set; }


    public SalesOrderDto orderWindowModel { get; set; } = default!;

    //[Parameter]
    public EventCallback ValidSubmit { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {
        //orderWindows = new List<SalesOrderDto>();
        orderWindowModel = new SalesOrderDto();
        //if (selectedId > 0)
        //orderWindowModel = await stateInfoService.GetState(selectedId);
    }



    public async Task WindowAddEdit()
    {
        try
        {
            //if (orderWindowModel != null)
            //    OrderWindows = new List<SalesOrderDto>();

            if (selectedId > 0)
            {
                //orderWindowModel = await stateInfoService.UpdateState(orderWindowModel);
                OrderWindows.Add(orderWindowModel);
            }
            else
            {
                OrderWindows.Add(orderWindowModel);
                //orderWindowModel = await stateInfoService.AddState(orderWindowModel);
                //await closePage();
            }

            if (OrderWindows.Count > 1)
            {

                var objBlankEntry = OrderWindows.FirstOrDefault(p => p.WindowTitle == "");
                if (objBlankEntry != null)
                    OrderWindows.Remove(objBlankEntry);
            }


            await closePage();
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }



    public async Task closePage()
    {

        // var stateInfos = await stateInfoService.GetStates();

        FromChildCloseAction(OrderWindows);
    }



}

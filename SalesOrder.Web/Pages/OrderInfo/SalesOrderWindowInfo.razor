@using SalesOrder.Models.Dtos
<h3>Window</h3>


@if (!AddEditShowed)
{
    @*State List*@
    <div>
        @*<button type="button" onclick="@showAdd" class="btn btn-primary" style="width:fit-content;text-align:right">Add Window</button>*@

        <Button Color="ButtonColor.Primary" @onclick="OnAddClick">Add Window</Button>
    </div>


    if (orderWindows.Count() > 0)
    {
        <table class="table table-striped">
            <thead class="thead-light">
                <tr>
                    <th scope="col">Id</th>
                    <th scope="col">Window</th>
                    <th scope="col">Qty</th>
                    <th scope="col">Total Sub-Elements</th>
                    <th></th>
                </tr>
            </thead>


            <tbody>
                @foreach (var itm in orderWindows)
                {
                    <tr>
                        <td>@itm.Id</td>
                        <td>@itm.WindowTitle</td>
                        <td>
                            @itm.WindowQty
                        </td>

                        <td>
                            @itm.TotalSubElement
                        </td>

                        <td>
                            @*<button class="btn btn-outline-dark" @onclick="@(() => showEdit(@itm.Id??0))">Edit</button>*@
                            <button class="btn btn-outline-dark" @onclick="@(() => OnShowEdit(@itm.Id??0))">Edit</button>
                            <button class="btn btn-outline-danger" @onclick="@(() => deleteConfirm(@itm))">Delete</button>
                        </td>

                    </tr>
                }

            </tbody>
        </table>

    }


}

@*<BlazorModal ShowModal=@showModal PageTitle="@AddEditTitle" modal_minWidth="600px">
    <Body>
        <SalesOrderWindowAddEdit selectedId="@selectedId"
                                 OrderWindows="@orderWindows"
                                 FromChildCloseAction="@closeAction"></SalesOrderWindowAddEdit>
    </Body>
</BlazorModal>*@




<Modal @ref="modal" Size="ModalSize.Regular" />

<ConfirmDialog @ref="dialog" />
<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />


@code {
    [Parameter]
    public SalesOrderDto salesOrderModel { get; set; } = default!;

    [Parameter]
    public Action<SalesOrderDto> FromWindowAction { get; set; }

    ////-------------------------------------

    public List<SalesOrderWindowDto> orderWindows { get; set; }
    public bool showModal = false;
    private bool IsAddEditShowed = false;
    public bool AddEditShowed { get { return IsAddEditShowed; } set { IsAddEditShowed = value; } }
    public int selectedId = 0;
    public string AddEditTitle { get; set; }


    protected override async Task OnInitializedAsync()
    {
        orderWindows = new List<SalesOrderWindowDto>() { new SalesOrderWindowDto { IsBlank = true } };
        //orderWindows = salesOrderModel.SalesOrderWindowList;

    }

    protected override async Task OnParametersSetAsync()
    {
        //orderWindows = new List<SalesOrderWindowDto>() { new SalesOrderWindowDto { IsBlank = true } };
        orderWindows = salesOrderModel.SalesOrderWindowList;
    }




    public void showAdd()
    {
        AddEditTitle = "Add Sales Order Window";
        selectedId = 0;
        showModal = true;

    }

    public void showEdit(int Id)
    {
        AddEditTitle = "Edit Sales Order Window";
        selectedId = Id;
        showModal = true;
    }


    public void delete(SalesOrderWindowDto row)
    {

        if (!(row.IsNew ?? false))
        {
            if (salesOrderModel.SalesOrderWindowDeleteList == null)
                salesOrderModel.SalesOrderWindowDeleteList = new List<SalesOrderWindowDto>();
            salesOrderModel.SalesOrderWindowDeleteList.Add(row);
        }

        #region Sub Element Delete
        var objSubElementList = salesOrderModel.WindowSubElementList.Where(p => p.OrderWindowId == row.Id);

        if (objSubElementList != null)
        {
            List<int> delSEList = new List<int>();
            foreach (var itm in objSubElementList)
            {
                if (!(itm.IsNew ?? false))
                {
                    if (salesOrderModel.WindowSubElementDeleteList == null)
                        salesOrderModel.WindowSubElementDeleteList = new List<WindowSubElementDto>();
                    salesOrderModel.WindowSubElementDeleteList.Add(itm);
                }
                delSEList.Add(itm.Id ?? 0);
            }

            if (delSEList != null)
            {
                foreach (var itm in delSEList)
                {
                    var obgSE = salesOrderModel.WindowSubElementList.FirstOrDefault(p => p.Id == itm);
                    salesOrderModel.WindowSubElementList.Remove(obgSE);
                }
            }
        }

        #endregion



        orderWindows.Remove(row);
        passToParent();
        //StateHasChanged();
    }


    public void closeAction(List<SalesOrderWindowDto> orderWindowData)
    {
        AddEditShowed = false;
        selectedId = 0;
        orderWindows = orderWindowData;

        salesOrderModel.SalesOrderWindowList = orderWindows.ToList();


        showModal = false;
        modal.HideAsync();

        StateHasChanged();
    }


    private void passToParent()
    {
        FromWindowAction(salesOrderModel);
    }



    #region bb Modal

    public Modal modal = default!;


    public async Task OnAddClick()
    {
        AddEditTitle = "Add Sales Order Window";
        selectedId = 0;
        var parameters = new Dictionary<string, object>();
        parameters.Add("selectedId", selectedId);
        parameters.Add("FromChildCloseAction", closeAction);
        parameters.Add("OrderWindows", orderWindows);
        await modal.ShowAsync<SalesOrderWindowAddEdit>(title: AddEditTitle, parameters: parameters);
    }


    public async void OnShowEdit(int Id)
    {
        AddEditTitle = "Edit Sales Order Window";
        selectedId = Id;

        var parameters = new Dictionary<string, object>();
        parameters.Add("selectedId", selectedId);
        parameters.Add("FromChildCloseAction", closeAction);
        parameters.Add("OrderWindows", orderWindows);

        //OrderWindows="@orderWindows"

        await modal.ShowAsync<SalesOrderWindowAddEdit>(title: AddEditTitle, parameters: parameters);
    }



    public ConfirmDialog dialog;
    public async Task deleteConfirm(SalesOrderWindowDto row)
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "OK",
                YesButtonColor = ButtonColor.Success,
                NoButtonText = "CANCEL",
                NoButtonColor = ButtonColor.Danger
            };

        var confirmation = await dialog.ShowAsync(
            title: "Sales Order Window delete",
            message1: $"Do you want delete Sales Order Window:{row.WindowTitle}?",
            confirmDialogOptions: options);

        if (confirmation)
        {

            if (!(row.IsNew ?? false))
            {
                if (salesOrderModel.SalesOrderWindowDeleteList == null)
                    salesOrderModel.SalesOrderWindowDeleteList = new List<SalesOrderWindowDto>();
                salesOrderModel.SalesOrderWindowDeleteList.Add(row);
            }

            #region Sub Element Delete
            var objSubElementList = salesOrderModel.WindowSubElementList.Where(p => p.OrderWindowId == row.Id);

            if (objSubElementList != null)
            {
                List<int> delSEList = new List<int>();
                foreach (var itm in objSubElementList)
                {
                    if (!(itm.IsNew ?? false))
                    {
                        if (salesOrderModel.WindowSubElementDeleteList == null)
                            salesOrderModel.WindowSubElementDeleteList = new List<WindowSubElementDto>();
                        salesOrderModel.WindowSubElementDeleteList.Add(itm);
                    }
                    delSEList.Add(itm.Id ?? 0);
                }

                if (delSEList != null)
                {
                    foreach (var itm in delSEList)
                    {
                        var obgSE = salesOrderModel.WindowSubElementList.FirstOrDefault(p => p.Id == itm);
                        salesOrderModel.WindowSubElementList.Remove(obgSE);
                    }
                }
            }

            #endregion



            orderWindows.Remove(row);
            passToParent();
            ShowMessage(ToastType.Danger, "Successfully Deleted.");

            // do whatever
        }
        else
        {
            // do whatever
        }
    }


    public List<ToastMessage> messages = new List<ToastMessage>();
    public void ShowMessage(ToastType toastType, string message) => messages.Add(CreateToastMessage(toastType, message));
    public ToastMessage CreateToastMessage(ToastType toastType, string message)
      => new ToastMessage
          {
              Type = toastType,
              Title = "Blazor Bootstrap",
              HelpText = $"{DateTime.Now}",
              Message = message,
          };



    #endregion


}

@using SalesOrder.Models.Dtos
<h3>Window</h3>


@if (!AddEditShowed)
{
    @*State List*@
    <div>
        <button type="button" onclick="@showAdd" class="btn btn-primary" style="width:fit-content;text-align:right">Add Window</button>
    </div>


    if (orderWindows.Count() > 0)
    {
        <table class="table table-striped">
            <thead class="thead-light">
                <tr>
                    <th scope="col">Id</th>
                    <th scope="col">Window</th>
                    <th scope="col">Qty</th>
                    <th scope="col">Total Sub-Elements</th>
                    <th></th>
                </tr>
            </thead>


            <tbody>
                @foreach (var itm in orderWindows)
                {
                    <tr>
                        <td>@itm.Id</td>
                        <td>@itm.WindowTitle</td>
                        <td>
                            @itm.WindowQty
                        </td>

                        <td>
                            @itm.TotalSubElement
                        </td>

                        <td>
                            <button class="btn btn-outline-dark" @onclick="@(() => showEdit(@itm.Id??0))">Edit</button>

                        </td>

                    </tr>
                }

            </tbody>
        </table>

    }


}

<BlazorModal ShowModal=@showModal PageTitle="@AddEditTitle" modal_minWidth="600px">
    <Body>
        <SalesOrderWindowAddEdit selectedId="@selectedId"
                                 OrderWindows="@orderWindows"
                                 FromChildCloseAction="@closeAction"></SalesOrderWindowAddEdit>
    </Body>
</BlazorModal>


@code {
    [Parameter]
    public SalesOrderDto salesOrderModel { get; set; } = default!;



    public List<SalesOrderWindowDto> orderWindows { get; set; }
    public bool showModal = false;
    private bool IsAddEditShowed = false;
    public bool AddEditShowed { get { return IsAddEditShowed; } set { IsAddEditShowed = value; } }
    public int selectedId = 0;
    public string AddEditTitle { get; set; }


    protected override async Task OnInitializedAsync()
    {
        orderWindows = new List<SalesOrderWindowDto>() { new SalesOrderWindowDto { IsBlank = true } };
    }


    public void showAdd()
    {
        AddEditTitle = "Add Sales Order Window";
        selectedId = 0;
        showModal = true;

    }

    public void showEdit(int Id)
    {
        AddEditTitle = "Edit Sales Order Window";
        selectedId = Id;
        showModal = true;
    }

    public void closeAction(List<SalesOrderWindowDto> orderWindowData)
    {
        AddEditShowed = false;
        selectedId = 0;
        orderWindows = orderWindowData;

        salesOrderModel.SalesOrderWindowList = orderWindows.ToList();


        showModal = false;

        StateHasChanged();
    }

}

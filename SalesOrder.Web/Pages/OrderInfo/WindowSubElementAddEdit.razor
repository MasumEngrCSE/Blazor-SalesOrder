@using SalesOrder.Models.Dtos
<div>
    <fieldset>
        @*<legend>Window SubElement</legend>*@
        <EditForm Model="@orderWindowModel" OnValidSubmit="@ValidSubmit">
            <DataAnnotationsValidator />
            <fieldset>

                <div class="row mb-2">
                    <label class="col-4" for="name">Sub-Element</label>
                    <InputNumber class="form-control col-6" @bind-Value="@orderWindowModel.SubElement" />
                </div>

                <div class="row mb-2">
                    <label class="col-4" for="name">Type</label>
                    <InputText class="form-control col-6" @bind-Value="@orderWindowModel.SubElementType" />
                </div>

                <div class="row mb-2">
                    <label class="col-4" for="name">Width</label>
                    <InputNumber class="form-control col-6" @bind-Value="@orderWindowModel.SubElementWidth" />
                </div>

                <div class="row mb-2">
                    <label class="col-4" for="name">Height</label>
                    <InputNumber class="form-control col-6" @bind-Value="@orderWindowModel.SubElementHeight" />
                </div>
            </fieldset>

        </EditForm>

    </fieldset>

</div>
@code {
    [Parameter]
    public int selectedId { get; set; }


    [Parameter]
    public Action<IEnumerable<SalesOrderDto>> FromChildCloseAction { get; set; } = default!;

    public IEnumerable<SalesOrderDto> orderWindows { get; set; }
    public SalesOrderDto orderWindowModel { get; set; } = default!;

    //[Parameter]
    public EventCallback ValidSubmit { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {
        orderWindows = new List<SalesOrderDto>();
        orderWindowModel = new SalesOrderDto();
    }
}

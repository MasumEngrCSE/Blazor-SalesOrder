@using SalesOrder.Models.Dtos


<div>

    <button type="button" onclick="@closePage" class="btn btn-primary" style="width:fit-content;text-align:right">
        Close
    </button>

    <button type="button" onclick="@SubElementAddEdit" class="btn btn-primary" style="width:fit-content;text-align:right">
        @(selectedId > 0 ? "Update Window" : "Add Window")
    </button>

</div>

<div>
    <fieldset>
        @*<legend>Window SubElement</legend>*@
        <EditForm Model="@WindowSubElementModel" OnValidSubmit="@ValidSubmit">
            <DataAnnotationsValidator />
            <fieldset>


                <div class="row mb-2">
                    <label class="col-4" for="name">Window:</label>
                    <InputSelect class="form-select" @bind-Value="WindowSubElementModel.OrderWindowId">
                        @if (WindowSubElementModel.OrderWindowId is null)
                        {
                            <option selected value="">None</option>
                        }

                        @if (WindowSubElementModel == null)
                        {
                            <option value="">Loading ...</option>
                        }
                        else
                        {
                            @foreach (var stateInfo in OrderWindowList)
                            {
                                <option value="@stateInfo.Id">@stateInfo.WindowTitle (ID: @stateInfo.OrderWindowId)</option>
                            }
                        }
                    </InputSelect>
                </div>

                <div class="row mb-2">
                    <label class="col-4" for="name">Sub-Element</label>
                    <InputNumber class="form-control col-6" @bind-Value="@WindowSubElementModel.SubElement" />
                </div>

                <div class="row mb-2">
                    <label class="col-4" for="name">Type</label>
                    <InputText class="form-control col-6" @bind-Value="@WindowSubElementModel.SubElementType" />
                </div>

                <div class="row mb-2">
                    <label class="col-4" for="name">Width</label>
                    <InputNumber class="form-control col-6" @bind-Value="@WindowSubElementModel.SubElementWidth" />
                </div>

                <div class="row mb-2">
                    <label class="col-4" for="name">Height</label>
                    <InputNumber class="form-control col-6" @bind-Value="@WindowSubElementModel.SubElementHeight" />
                </div>
            </fieldset>

        </EditForm>

    </fieldset>

</div>
@code {
    [Parameter]
    public int selectedId { get; set; }


    [Parameter]
    public Action<List<WindowSubElementDto>> FromChildCloseAction { get; set; } = default!;

    [Parameter]
    public List<WindowSubElementDto> WindowSubElements { get; set; }

    public WindowSubElementDto WindowSubElementModel { get; set; } = default!;
    
    [Parameter]
    public List<SalesOrderWindowDto> OrderWindowList { get; set; } = default!;

    //[Parameter]
    public EventCallback ValidSubmit { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {
        //WindowSubElements = new List<SalesOrderDto>();
        WindowSubElementModel = new WindowSubElementDto();
    }



    public async Task SubElementAddEdit()
    {
        try
        {
            if (selectedId > 0)
            {
                //orderWindowModel = await stateInfoService.UpdateState(orderWindowModel);
                WindowSubElements.Add(WindowSubElementModel);
            }
            else
            {
                WindowSubElementModel.Id = WindowSubElements.Max(p => p.Id) + 1;

                WindowSubElements.Add(WindowSubElementModel);
                //orderWindowModel = await stateInfoService.AddState(orderWindowModel);
                //await closePage();
            }

            if (WindowSubElements.Count > 1)
            {

                var objBlankEntry = WindowSubElements.FirstOrDefault(p => p.IsBlank == true);
                if (objBlankEntry != null)
                    WindowSubElements.Remove(objBlankEntry);
            }


            await closePage();
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }




    public async Task closePage()
    {

        // var stateInfos = await stateInfoService.GetStates();

        FromChildCloseAction(WindowSubElements);
    }
}
